import os
import re
import threading
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv
from database import init_chat_db, save_message, get_chat_history, clear_chat_history, init_payment_db, save_payment, has_paid, get_allowed_users_from_db
import openai


load_dotenv()


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)


BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = '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'


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


openai.api_key = OPENAI_API_KEY


init_chat_db()
init_payment_db()


PRODUCTS = {
    "–º–∞–≥–Ω–∏–π": {
        "title": "–ú–∞–≥–Ω–∏–π B6",
        "description": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Å–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å.",
        "price": "1200‚ÇΩ",
        "link": "https://example.com/magnesium"
    },
    "–≤–∏—Ç–∞–º–∏–Ω c": {
        "title": "–í–∏—Ç–∞–º–∏–Ω C",
        "description": "–£–∫—Ä–µ–ø–ª—è–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ –ø–æ–º–æ–≥–∞–µ—Ç –±–æ—Ä–æ—Ç—å—Å—è —Å –∏–Ω—Ñ–µ–∫—Ü–∏—è–º–∏.",
        "price": "900‚ÇΩ",
        "link": "https://example.com/vitamin-c"
    },
    "–æ–º–µ–≥–∞-3": {
        "title": "–û–º–µ–≥–∞-3",
        "description": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤.",
        "price": "1500‚ÇΩ",
        "link": "https://example.com/omega-3"
    }
}



async def check_payment(user_id):
    return has_paid(user_id)

def recommend_product(user_message):
    user_message = user_message.lower()
    for keyword, product in PRODUCTS.items():
        if keyword in user_message:
            return product
    return None

def update_allowed_users_periodically():
    global ALLOWED_USERS
    ALLOWED_USERS = get_allowed_users_from_db()
    print(f"–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω: {ALLOWED_USERS}")
    threading.Timer(60, update_allowed_users_periodically).start()


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    if await check_payment(user_id):
        await message.reply("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newchat [–Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞].")
    else:
        save_payment(user_id)
        await message.reply("üí≥ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞, –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å. \n –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞: \n –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /pay.")


@dp.message(Command("pay"))
async def process_payment(message: types.Message):
    user_id = message.from_user.id
    if await check_payment(user_id):
        await message.reply("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /newchat [–Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞].")
    else:
        save_payment(user_id)
        await message.reply("üí≥ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /newchat [–Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞].")


@dp.message(Command("newchat"))
async def new_chat(message: types.Message):
    user_id = message.from_user.id
    if not await check_payment(user_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay.")
        return

    chat_name = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else "default"
    save_message(user_id, chat_name, "system", f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç: {chat_name}")
    await message.reply(f"‚ú® –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: {chat_name} \n –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º.")


@dp.message()
async def chat_with_gpt(message: types.Message):
    user_id = message.from_user.id
    if not await check_payment(user_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay.")
        return

    chat_name = "default"
    history = get_chat_history(user_id, chat_name)
    history.append({"role": "user", "content": message.text})

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4o",
            messages=history
        )
        bot_reply = response['choices'][0]['message']['content']

        product = recommend_product(message.text)
        if product:
            bot_reply += f"\n\nüåø *–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:* *{product['title']}*\n{product['description']}\nüí∞ –¶–µ–Ω–∞: {product['price']}\nüîó [–ö—É–ø–∏—Ç—å]({product['link']})"

        save_message(user_id, chat_name, "user", message.text)
        save_message(user_id, chat_name, "assistant", bot_reply)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        bot_reply = "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."

    await message.reply(bot_reply, parse_mode="Markdown", disable_web_page_preview=False)


@dp.message(Command("clear"))
async def clear_history(message: types.Message):
    user_id = message.from_user.id
    if not await check_payment(user_id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay.")
        return

    chat_name = "default"
    clear_chat_history(user_id, chat_name)
    await message.reply("üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

# import os
# import re
# import threading
# import asyncio
# import logging
# import asyncpg
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters import Command
# from dotenv import load_dotenv
# from database import init_chat_db, save_message, get_chat_history, clear_chat_history
# import openai


# load_dotenv()


# logging.basicConfig(
#     level=logging.INFO,
#     format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
#     datefmt="%Y-%m-%d %H:%M:%S",
# )


# BOT_TOKEN = os.getenv("BOT_TOKEN")
# OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# DATABASE_URL = os.getenv("DATABASE_URL")


# bot = Bot(token=BOT_TOKEN)
# dp = Dispatcher()


# openai.api_key = OPENAI_API_KEY


# init_chat_db()


# PRODUCTS = {
#     "–º–∞–≥–Ω–∏–π": {"title": "–ú–∞–≥–Ω–∏–π B6", "description": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Å–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å.", "price": "1200‚ÇΩ", "link": "https://example.com/magnesium"},
#     "–≤–∏—Ç–∞–º–∏–Ω c": {"title": "–í–∏—Ç–∞–º–∏–Ω C", "description": "–£–∫—Ä–µ–ø–ª—è–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç –∏ –ø–æ–º–æ–≥–∞–µ—Ç –±–æ—Ä–æ—Ç—å—Å—è —Å –∏–Ω—Ñ–µ–∫—Ü–∏—è–º–∏.", "price": "900‚ÇΩ", "link": "https://example.com/vitamin-c"},
#     "–æ–º–µ–≥–∞-3": {"title": "–û–º–µ–≥–∞-3", "description": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–æ—Å—É–¥–æ–≤.", "price": "1500‚ÇΩ", "link": "https://example.com/omega-3"}
# }


# async def create_pool():
#     return await asyncpg.create_pool(DATABASE_URL)

# async def get_payment_status(user_id):
#     async with await create_pool() as pool:
#         result = await pool.fetchrow('SELECT paid FROM users WHERE user_id = $1', user_id)
#         return result['paid'] if result else False


# @dp.message(Command("start"))
# async def send_welcome(message: types.Message):
#     user_id = message.from_user.id
#     if await get_payment_status(user_id):
#         await message.reply("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newchat [–Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞].")
#     else:
#         await message.reply("üí≥ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞, –≤–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay.")


# @dp.message(Command("pay"))
# async def process_payment(message: types.Message):
#     user_id = message.from_user.id
#     if await get_payment_status(user_id):
#         await message.reply("‚úÖ –û–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
#     else:
#         await message.reply("üí≥ –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


# @dp.message(Command("newchat"))
# async def new_chat(message: types.Message):
#     user_id = message.from_user.id
#     if not await get_payment_status(user_id):
#         await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay.")
#         return

#     chat_name = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else "default"
#     save_message(user_id, chat_name, "system", f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç: {chat_name}")
#     await message.reply(f"‚ú® –ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: {chat_name} \n –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º.")


# @dp.message()
# async def chat_with_gpt(message: types.Message):
#     user_id = message.from_user.id
#     if not await get_payment_status(user_id):
#         await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay.")
#         return

#     chat_name = "default" 
#     history = get_chat_history(user_id, chat_name)
#     history.append({"role": "user", "content": message.text})

#     try:
#         response = await openai.ChatCompletion.acreate(model="gpt-4o", messages=history)
#         bot_reply = response['choices'][0]['message']['content']

#         product = recommend_product(message.text)
#         if product:
#             bot_reply += f"\n\nüåø *–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:* *{product['title']}*\n{product['description']}\nüí∞ –¶–µ–Ω–∞: {product['price']}\nüîó [–ö—É–ø–∏—Ç—å]({product['link']})"

#         save_message(user_id, chat_name, "user", message.text)
#         save_message(user_id, chat_name, "assistant", bot_reply)
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
#         bot_reply = "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."

#     await message.reply(bot_reply, parse_mode="Markdown", disable_web_page_preview=False)


# @dp.message(Command("clear"))
# async def clear_history(message: types.Message):
#     user_id = message.from_user.id
#     if not await get_payment_status(user_id):
#         await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /pay.")
#         return

#     chat_name = "default"
#     clear_chat_history(user_id, chat_name)
#     await message.reply("üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")


# async def main():
#     logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     asyncio.run(main())
