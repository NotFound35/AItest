import os
from telethon import TelegramClient, events
import openai
import difflib
import logging
from dotenv import load_dotenv

load_dotenv()
# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
# api_id = '20590033'  # –£–∫–∞–∂–∏—Ç–µ API_ID
# api_hash = '3c282ae507c0fbb7e9fcab64222e622e'  # –£–∫–∞–∂–∏—Ç–µ API_HASH
# phone_number = '+35795145008'  # –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ Telegram
# openai_api_key = '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'  # –í–∞—à API-–∫–ª—é—á OpenAI

# –ù–∞—Å—Ç—Ä–æ–∏–º OpenAI API
openai.api_key = os.getenv('OPENAI_API_KEY')
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
client = TelegramClient('session_name', api_id, api_hash)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
products = {
    "001": {
        "name": "–£–º–Ω—ã–µ —á–∞—Å—ã",
        "description": "–£–º–Ω—ã–µ —á–∞—Å—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–¥–æ—Ä–æ–≤—å—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.",
        "price": 1999,
        "image": "https://example.com/smartwatch.jpg",
        "link": "https://example.com/buy/smartwatch"
    },
    "002": {
        "name": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏",
        "description": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å –æ—Ç–ª–∏—á–Ω—ã–º –∑–≤—É–∫–æ–º.",
        "price": 2999,
        "image": "https://example.com/headphones.jpg",
        "link": "https://example.com/buy/headphones"
    }
}

def get_product_recommendations(user_input):
    recommendations = []
    for product in products.values():
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä)
        match_name = difflib.get_close_matches(user_input.lower(), [product["name"].lower()], cutoff=0.5)
        match_desc = difflib.get_close_matches(user_input.lower(), [product["description"].lower()], cutoff=0.5)
        
        if match_name or match_desc:
            recommendations.append(product)

    return recommendations

async def generate_response(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response['choices'][0]['message']['content']

# def get_product_recommendations(user_input):
#     recommendations = []
#     for product_id, product in products.items():
#         if product["name"].lower() in user_input.lower() or product["description"].lower() in user_input.lower():
#             recommendations.append(product)
#     return recommendations

# –§–∏–ª—å—Ç—Ä: —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –õ–ò–ß–ù–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è
@client.on(events.NewMessage(func=lambda e: e.is_private))
async def my_event_handler(event):

    me = await client.get_me()
    if event.message.sender_id == me.id:
        return

    incoming_message = event.message.message
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {incoming_message} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.message.sender_id}")
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = get_product_recommendations(incoming_message)
    if recommendations:
        response = "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n"
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(recommendations)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        for product in recommendations:
            response += f"{product['name']}\n{product['description']}\n–¶–µ–Ω–∞: {product['price']} —Ä—É–±–ª–µ–π\n" \
                        f"![–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]({product['image']})\n" \
                        f"[–ö—É–ø–∏—Ç—å –∑–¥–µ—Å—å]({product['link']})\n\n"
            
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {product['name']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {event.message.sender_id}")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ AI
        try:
            response = await generate_response(incoming_message)
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI: {response}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")

    await event.reply(response)

async def main():
    await client.start()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await client.run_until_disconnected()

with client:
    client.loop.run_until_complete(main())


# import os
# from telethon import TelegramClient, events
# import openai


# # –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
# api_id = '20590033'
# api_hash = '3c282ae507c0fbb7e9fcab64222e622e'
# phone_number = '+35795145008'
# openai_api_key = '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'

# # –ù–∞—Å—Ç—Ä–æ–∏–º OpenAI API
# openai.api_key = openai_api_key

# # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
# client = TelegramClient('session_name', api_id, api_hash)

# # –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
# products = {
#     "001": {
#         "name": "–£–º–Ω—ã–µ —á–∞—Å—ã",
#         "description": "–£–º–Ω—ã–µ —á–∞—Å—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–¥–æ—Ä–æ–≤—å—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.",
#         "price": 1999,
#         "image": "https://example.com/smartwatch.jpg",
#         "link": "https://example.com/buy/smartwatch"
#     },
#     "002": {
#         "name": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏",
#         "description": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å –æ—Ç–ª–∏—á–Ω—ã–º –∑–≤—É–∫–æ–º.",
#         "price": 2999,
#         "image": "https://example.com/headphones.jpg",
#         "link": "https://example.com/buy/headphones"
#     }
# }

# async def generate_response(prompt):
#     response = openai.ChatCompletion.create(
#         model="gpt-3.5-turbo",
#         messages=[{"role": "user", "content": prompt}]
#     )
#     return response['choices'][0]['message']['content']

# def get_product_recommendations(user_input):
#     recommendations = []
#     for product_id, product in products.items():
#         if product["name"].lower() in user_input.lower() or product["description"].lower() in user_input.lower():
#             recommendations.append(product)
#     return recommendations

# @client.on(events.NewMessage())
# async def my_event_handler(event):
#     incoming_message = event.message.message
#     print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {incoming_message}")
#     # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
#     recommendations = get_product_recommendations(incoming_message)
#     if recommendations:
#         response = "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n\n"
#         for product in recommendations:
#             response += f"{product['name']}\n{product['description']}\n–¶–µ–Ω–∞: {product['price']} —Ä—É–±–ª–µ–π\n" \
#                         f"![–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]({product['image']})\n" \
#                         f"[–ö—É–ø–∏—Ç—å –∑–¥–µ—Å—å]({product['link']})\n\n"
#     else:
#         # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ AI
#         response = await generate_response(incoming_message)
#     await event.reply(response)

# async def main():
#     await client.start()
#     print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...")
#     await client.run_until_disconnected()
# with client:
#     client.loop.run_until_complete(main())




# import os
# import asyncio
# import openai
# import logging
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters import Command
# from openai import OpenAI
# from dotenv import load_dotenv

# load_dotenv()

# logging.basicConfig(
#     level=logging.INFO,
#     format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
#     datefmt="%Y-%m-%d %H:%M:%S",
# )

# # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
# BOT_TOKEN = os.getenv("BOT_TOKEN")
# # OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# ALLOWED_USERS = set(map(int, os.getenv("ALLOWED_USERS", "").split(",")))

# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# bot = Bot(token=BOT_TOKEN)
# dp = Dispatcher()

# # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á API –¥–ª—è OpenAI
# client = OpenAI(api_key="sk-87fca32327e74d63bb2f68787100a051", base_url)

# # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# async def is_allowed_user(user_id):
#     return user_id in ALLOWED_USERS

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
# @dp.message(Command("start"))
# async def send_welcome(message: types.Message):
#     logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è –≤ –±–æ—Ç–µ")

#     if not await is_allowed_user(message.from_user.id):
#         logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –∑–∞–ø—Ä–µ—â–µ–Ω –≤—Ö–æ–¥")
#         await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
#         return
#     await message.reply("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø—Ä–æ–¥–∞–≤–µ—Ü. –ù–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å!")

# # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å OpenAI
# @dp.message()
# async def chat_with_gpt(message: types.Message):
#     logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} {message.text}")

#     if not await is_allowed_user(message.from_user.id):
#         logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ {message.from_user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å {message.text}")
#         await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
#         return

#     try:
#         # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ API OpenAI
#         response = openai.ChatCompletion.create(
#             model="deepseek-chat",
#             messages=[{"role": "user", "content": message.text}]
#         )
#         reply = response["choices"][0]["message"]["content"]
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
#         reply = "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

#     await message.reply(reply)

# async def main():
#     dp.startup.register(lambda: logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"))
#     await dp.start_polling(bot)

# # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# if __name__ == "__main__":
#     asyncio.run(main())
